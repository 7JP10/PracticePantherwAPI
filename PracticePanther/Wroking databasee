using Newtonsoft.Json;
using PracticePanther.API.EC;
using PracticePanther.Library.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace PracticePanther.API.Database
{
    public class Filebase
    {
        private string _clientRoot;
        private static Filebase? _instance;


        public static Filebase Current
        {
            get
            {
                if(_instance == null)
                {
                    _instance = new Filebase();
                }

                return _instance;
            }
        }

        private Filebase()
        {
            _clientRoot = $"Clients";
        }

        public Client AddOrUpdate(Client c)
        {
            //set up a new Id if one doesn't already exist
            if(c.Id <= 0)
            {
                c.Id = LastClientId + 1;
            }

            //go to the right place]
            string path;
            path = $"{_clientRoot}\\{c.Id}.json";

            //if the item has been previously persisted
            if(File.Exists(path))
            {
                //blow it up
                File.Delete(path);
            }

            //write the file
            File.WriteAllText(path, JsonConvert.SerializeObject(c));

            //return the item, which now has an id
            return c;
        }

        public List<Client> Clients
        {
            get
            {
                /*var root = new DirectoryInfo(_clientRoot);
                var _apps = new List<Appointment>();
                foreach (var appFile in root.GetFiles())
                {
                    var app = JsonConvert.DeserializeObject<Appointment>(File.ReadAllText(appFile.FullName));
                    _apps.Add(app);
                }*/

                var root = new DirectoryInfo(_clientRoot);

                var _clients = new List<Client>();

                
                try
                {
                    // Determine whether the directory exists.
                    if (!root.Exists) {
                        root.Create();
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("The process failed: {0}", e.ToString());
                }
                finally { }

                foreach (var appFile in root.GetFiles())
                {
                    var app = JsonConvert.DeserializeObject<Client>(File.ReadAllText(appFile.FullName));
                    if (app != null)
                    {
                        _clients.Add(app);
                    }
                }

                return _clients;
            }
        }

        public bool Delete(string id)
        {
            //go to the right place]
            string path;
            //path = $"{_clientRoot}\\{id}.json";
            path = $"{_clientRoot}\\{id}.json";

            //if the item has been previously persisted
            if (File.Exists(path))
            {
                //blow it up
                File.Delete(path);
            }

            return true;
        }

        //************************************************************

        private int LastClientId
        {
            get
            {
                //return Clients.Any() ? Clients.Select(c => c.Id).Max() : 0;
                if (Clients.Any())
                {
                    return Clients.Select(c => c.Id).Max();
                }

                return 0;
            }
        }


    }
}
